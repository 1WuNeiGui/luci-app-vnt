#!/bin/sh /etc/rc.common
# Copyright (C) 2008-2020 OpenWrt.org
# Copyright (C) 2022 ImmortalWrt.org

START=99
USE_PROCD=1
vntcli=/usr/bin/vnt-cli
vnts=/usr/bin/vnts

start_instance() {
	local cfg="$1"

	local type
	config_get type "$cfg" TYPE

	case "$type" in
	vnt-cli)
		local enabled
		config_get_bool enabled "$cfg" 'enabled' '0'
		[ "$enabled" = "1" ] || return 1
		if [ ! -f "$vntcli" ] || [ $(($($vntcli -h | wc -l))) -gt 3 ] ; then
		 logger 'vnt : 未找到程序 $vntcli 开始下载 '
		 vntcli="/tmp/vnt-cli" 

cputype=$(uname -ms | tr ' ' '_' | tr '[A-Z]' '[a-z]')
[ -n "$(echo $cputype | grep -E "linux.*armv.*")" ] && cpucore="arm"
[ -n "$(echo $cputype | grep -E "linux.*armv7.*")" ] && [ -n "$(cat /proc/cpuinfo | grep vfp)" ] && [ ! -d /jffs/clash ] && cpucore="armv7"
[ -n "$(echo $cputype | grep -E "linux.*aarch64.*|linux.*armv8.*")" ] && cpucore="aarch64"
[ -n "$(echo $cputype | grep -E "linux.*86.*")" ] && cpucore="i386"
[ -n "$(echo $cputype | grep -E "linux.*86_64.*")" ] && cpucore="x86_64"
if [ -n "$(echo $cputype | grep -E "linux.*mips.*")" ] ; then
mipstype=$(echo -n I | hexdump -o 2>/dev/null | awk '{ print substr($2,6,1); exit}') 
[ "$mipstype" = "0" ] && cpucore="mips" || cpucore="mipsle"
fi

case "${cpucore}" in 
	"mipsle") curl -o "${vntcli}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_mipsle
	;;
	"mips")  curl -o "${vntcli}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_mips
	;;
	"x86_64")  curl -o "${vntcli}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_x86_64
	;;
	"i386")  curl -o "${vntcli}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_i386
	;;
	"arm")  curl -o "${vntcli}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_arm
	;;
	"armv7")  curl -o "${vntcli}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_armv7
	;;
	"aarch64")  curl -o "${vntcli}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_aarch64
	;;
esac
 chmod +x "$vntcli"
 [ $(($($vntcli -h | wc -l))) -gt 3 ] && logger 'vnt : $vntcli 下载成功 '  || logger 'vnt : $vntcli 下载失败，请手动下载上传至/usr/bin/vnt-cli 程序已退出' && exit 1
                fi
                pgrep vnt-cli | xargs kill -9 >/dev/null 2>&1
		local token mode ipaddr mtu desvice_id localadd 
		local peeradd desvice_name vntshost stunhost 
		local punch client_port par key forward serverw 
		local finger relay first_latency multicast tunmode tcp passmode
		config_get token "$cfg" 'token'
                config_get desvice_id "$cfg" 'desvice_id'
                config_get desvice_name "$cfg" 'desvice_name'
                config_get vntshost "$cfg" 'vntshost'
                config_get stunhost "$cfg" 'stunhost'
                config_get client_port "$cfg" 'client_port'
                config_get par "$cfg" 'par'
                config_get punch "$cfg" 'punch'
                config_get passmode "$cfg" 'passmode'
                config_get peeradd "$cfg" 'peeradd'
                config_get localadd "$cfg" 'localadd'
		config_get mode "$cfg" 'mode'
		config_get ipaddr "$cfg" 'ipaddr'
		config_get mtu "$cfg" 'mtu'
		config_get tunmode "$cfg" 'tunmode'
		config_get key "$cfg" 'key'
		config_get_bool relay "$cfg" 'relay' '0'
		config_get_bool serverw "$cfg" 'serverw' '0'
		config_get tcp "$cfg" 'tcp'
		config_get_bool forward "$cfg" 'forward' '0'
		config_get_bool finger "$cfg" 'finger' '0'
		config_get_bool multicast "$cfg" 'multicast' '0'
		config_get_bool first_latency "$cfg" 'first_latency' '0'
               
		procd_open_instance "vnt-cli"
		procd_set_param command "$vntcli"
		procd_append_param command -k "$token"
		[ -z "$ipaddr" ] || procd_append_param command --ip "$ipaddr"
		[ -z "$mtu" ] || procd_append_param command -u "$mtu"
		[ -z "$desvice_id" ] || procd_append_param command -d "$desvice_id"
		[ -z "$desvice_name" ] || procd_append_param command -n "$desvice_name"
		[ -z "$vntshost" ] || procd_append_param command -s "$vntshost"
		[ -z "$stunhost" ] || procd_append_param command -e "$stunhost"
		[ -z "$client_port" ] || procd_append_param command --port "$client_port"
		[ -z "$key" ] || procd_append_param command -w "$key"
		if [ ! -z "$peeradd" ] ; then

                  if [[ $peeradd == *":"* ]]; then
                   peeradds=$(echo "$peeradd" | sed 's/:/\n/g')
                    for peeraddr in $peeradds; do
                    procd_append_param command -i "$peeraddr"
                   done
                   else
                   procd_append_param command -i "$peeradd"
                   fi
                fi

                if [ ! -z "$localadd" ] ; then
                
                  if [[ $localadd == *":"* ]]; then
                   localadds=$(echo "$localadd" | sed 's/:/\n/g')
                     for localaddr in $localadds; do
                    procd_append_param command -o "$localaddr"
                     done
                   else
                   procd_append_param command -o "$localadd"
                   fi
                fi
		[ -z "$par" ] || procd_append_param command --par "$par"
		[ "$punch" = "ipv4/ipv6" ] || procd_append_param command --punch "$punch"
		[ "$passmode" = "off" ] || procd_append_param command --model "$passmode"
		[ "$tunmode" = "tun" ] || procd_append_param command -a
		[ "$tcp" = "udp" ] || procd_append_param command --tcp
		[ "$forward" = "0" ] || procd_append_param command --no-proxy
		[ "$finger" = "0" ] || procd_append_param command --finger
		[ "$multicast" = "0" ] || procd_append_param command -m
		[ "$serverw" = "0" ] || procd_append_param command -W
		[ "$first_latency" = "0" ] || procd_append_param command --first_latency
                [ "$relay" = "0" ] || procd_append_param command --relay

		procd_set_param limits core="unlimited"
		procd_set_param limits nofile="1000000 1000000"
		procd_set_param stdout 1
		procd_set_param stderr 1
		procd_set_param respawn
		procd_close_instance

		iptables -t nat -I POSTROUTING -j MASQUERADE
		iptables -I FORWARD -o vnt-tun -j ACCEPT
                iptables -I FORWARD -i vnt-tun -j ACCEPT
                iptables -I INPUT -i vnt-tun -j ACCEPT
		[ "$forward" = "0" ] || sysctl -w net.ipv4.ip_forward=1
	;;
	vnts)
		local enabled
		config_get_bool enabled "$cfg" 'enabled' '0'
		[ "$enabled" = "1" ] || return 1
		if [ $(($($vnts -h | wc -l))) -gt 3 ] || [ ! -f "$vnts" ] ; then
		logger 'vnt : $vnts 下载失败，请手动下载上传至/usr/bin/vnts 程序已退出'
		exit 1
		fi
                pgrep vnts | xargs kill -9 >/dev/null 2>&1
		local server_port white_Token subnet servern_netmask
		config_get server_port "$cfg" 'server_port'
		config_get white_Token "$cfg" 'white_Token'
		config_get subnet "$cfg" 'subnet'
		config_get servern_netmask "$cfg" 'servern_netmask'

		procd_open_instance "vnts"
		procd_set_param command "$vnts"
		procd_append_param command --port "$server_port"
		if [ ! -z "$white_Token" ] ; then
                
                  if [[ $white_Token == *":"* ]]; then
                   white_Tokens=$(echo "$white_Token" | sed 's/:/\n/g')
                     for white_Tokenr in $white_Tokens; do
                    procd_append_param command --white-token "$white_Tokenr"
                     done
                   else
                   procd_append_param command --white-token "$white_Tokenr"
                   fi
                fi
		[ -z "$subnet" ] || procd_append_param command --gateway "$subnet"
		[ -z "$servern_netmask" ] || procd_append_param command --netmask "$servern_netmask"

		procd_set_param limits core="unlimited"
		procd_set_param limits nofile="1000000 1000000"
		procd_set_param stdout 1
		procd_set_param stderr 1
		procd_set_param respawn
		procd_close_instance

		iptables -I INPUT -p udp --dport $server_port -j ACCEPT -m comment --comment 'vnt vnts'
	;;
	esac
}

stop_instance() {
	local cfg="$1"

	local type
	config_get type "$cfg" TYPE

	case "$type" in
	vnt-cli)

		pgrep vnt-cli | xargs kill -9 >/dev/null 2>&1
		iptables -D FORWARD -o vnt-tun -j ACCEPT 2>"/dev/null"
                iptables -D FORWARD -i vnt-tun -j ACCEPT 2>"/dev/null"
                iptables -D INPUT -i vnt-tun -j ACCEPT 2>"/dev/null"
	;;
	vnts)
		local server_port
		config_get server_port "$cfg" 'server_port'
                pgrep vnts | xargs kill -9 >/dev/null 2>&1
		iptables -D INPUT -p udp --dport "$server_port" -j ACCEPT -m comment --comment 'vnt vnts' 2>"/dev/null"
	;;
	esac
}

start_service() {
        logger 'vnt : 开始启动'
	config_load 'vnt'
	config_foreach start_instance 'vnt-cli'
	config_foreach start_instance 'vnts'
}

stop_service() {
        logger 'vnt : 停止运行'
	config_load 'vnt'
	config_foreach stop_instance 'vnt-cli'
	config_foreach stop_instance 'vnts'
}

reload_service() {
       logger 'vnt : 重新启动'
	stop
	start
}

service_triggers() {
	procd_add_reload_trigger "vnt"
}
