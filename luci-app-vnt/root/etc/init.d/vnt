#!/bin/sh /etc/rc.common
# Copyright (C) 2008-2020 OpenWrt.org

START=99
USE_PROCD=1


start_instance() {
         local cfg="$1"

	local type
	config_get type "$cfg" TYPE
        cputype=$(uname -ms | tr ' ' '_' | tr '[A-Z]' '[a-z]')
        [ -n "$(echo $cputype | grep -E "linux.*armv.*")" ] && cpucore="arm"
        [ -n "$(echo $cputype | grep -E "linux.*armv7.*")" ] && [ -n "$(cat /proc/cpuinfo | grep vfp)" ] && [ ! -d /jffs/clash ] && cpucore="armv7"
        [ -n "$(echo $cputype | grep -E "linux.*aarch64.*|linux.*armv8.*")" ] && cpucore="aarch64"
        [ -n "$(echo $cputype | grep -E "linux.*86.*")" ] && cpucore="i386"
        [ -n "$(echo $cputype | grep -E "linux.*86_64.*")" ] && cpucore="x86_64"
        if [ -n "$(echo $cputype | grep -E "linux.*mips.*")" ] ; then
           mipstype=$(echo -n I | hexdump -o 2>/dev/null | awk '{ print substr($2,6,1); exit}') 
           [ "$mipstype" = "0" ] && cpucore="mips" || cpucore="mipsle"
        fi
	case "$type" in
	vnt-cli)
		local enabled
		config_get_bool enabled "$cfg" 'enabled' '0'
		[ "$enabled" = "1" ] || return 1
                config_get clibin "$cfg" 'clibin'
                if [ -z "$clibin" ] ;then
                   clibin=/tmp/vnt-cli
                fi
                if [ "$clibin" = "/usr/bin/vnt-cli" ] || [ -f /usr/bin/vnt-cli ] ; then
                   sed -i "/clibin/c option clibin '/usr/bin/vnt-cli' " /etc/config/vnt 
                   clibin=/usr/bin/vnt-cli
                fi
		if [ $(($($clibin -h | wc -l))) -lt 3 ] || [ ! -f "$clibin" ] ; then
		 logger "vnt : 未找到程序 $clibin 开始在线下载，下载较慢耐心等候 "
                 path=$(dirname "$clibin")
                 mkdir -p "$path"
case "${cpucore}" in 
	"mipsle")  curl -o "${clibin}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_mipsle
	;;
	"mips")  curl -o "${clibin}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_mips
	;;
	"x86_64")  curl -o "${clibin}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_x86_64
	;;
	"i386")  curl -o "${clibin}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_i386
	;;
	"arm")  curl -o "${clibin}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_arm
	;;
	"armv7")  curl -o "${clibin}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_armv7
	;;
	"aarch64")  curl -o "${clibin}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_aarch64
	;;
esac

 chmod +x "$clibin"
 if [ $(($($clibin -h | wc -l))) -gt 3 ]; then
    logger "vnt : ${clibin} 下载成功"
    if [ "${path:0:4}" = "/tmp" ] ;then 
       size="$(df -k | awk '/\/overlay$/ {sub(/K$/, "", $4); print $4}')"
         if [ "$size" -gt 4 ] ; then
            cp -rf  "$clibin" /usr/bin/vnt-cli
            sed -i "/clibin/c option clibin '/usr/bin/vnt-cli' " /etc/config/vnt
            clibin=/usr/bin/vnt-cli
          fi
    fi
 else
 logger "vnt : $clibin 下载失败，请手动下载上传程序,程序退出"
 exit 1
 fi
                fi
                chmod +x "$clibin"
                pgrep vnt-cli | xargs kill -9 >/dev/null 2>&1
		local token mode ipaddr mtu desvice_id localadd 
		local peeradd desvice_name vntshost stunhost 
		local punch client_port par key forward serverw 
		local finger relay first_latency multicast tunmode tcp passmode
		config_get token "$cfg" 'token'
                config_get desvice_id "$cfg" 'desvice_id'
                config_get desvice_name "$cfg" 'desvice_name'
                config_get vntshost "$cfg" 'vntshost'
                config_get stunhost "$cfg" 'stunhost'
                config_get client_port "$cfg" 'client_port'
                config_get par "$cfg" 'par'
                config_get punch "$cfg" 'punch'
                config_get passmode "$cfg" 'passmode'
                config_get peeradd "$cfg" 'peeradd'
                config_get localadd "$cfg" 'localadd'
		config_get mode "$cfg" 'mode'
		config_get ipaddr "$cfg" 'ipaddr'
		config_get mtu "$cfg" 'mtu'
		config_get tunmode "$cfg" 'tunmode'
		config_get key "$cfg" 'key'
		config_get_bool relay "$cfg" 'relay' '0'
		config_get_bool serverw "$cfg" 'serverw' '0'
		config_get tcp "$cfg" 'tcp'
		config_get_bool forward "$cfg" 'forward' '0'
		config_get_bool finger "$cfg" 'finger' '0'
		config_get_bool multicast "$cfg" 'multicast' '0'
		config_get_bool first_latency "$cfg" 'first_latency' '0'
               
		procd_open_instance "vnt-cli"
		procd_set_param command "$clibin"
		procd_append_param command -k "$token"
		[ -z "$ipaddr" ] || procd_append_param command --ip "$ipaddr"
		[ -z "$mtu" ] || procd_append_param command -u "$mtu"
		[ -z "$desvice_id" ] || procd_append_param command -d "$desvice_id"
		[ -z "$desvice_name" ] || procd_append_param command -n "$desvice_name"
		[ -z "$vntshost" ] || procd_append_param command -s "$vntshost"
		[ -z "$stunhost" ] || procd_append_param command -e "$stunhost"
		[ -z "$client_port" ] || procd_append_param command --port "$client_port"
		[ -z "$key" ] || procd_append_param command -w "$key"
		if [ ! -z "$peeradd" ] ; then
                  if [[ "$(grep "list peeradd" /etc/config/vnt | awk '{print $3}' | wc -l ) " -eq 1 ]]; then
                    procd_append_param command -i "$peeradd"
                  else
                    for peeraddr in $(cat /etc/config/vnt | grep 'list peeradd'  | awk '{print $3}'| sed "s/'/\n/g" | tr -d " ' "); do
                    procd_append_param command -i "$peeraddr"
                   done
                   fi
                fi

                if [ ! -z "$localadd" ] ; then
                  if [[ "$(grep "list localadd" /etc/config/vnt | awk '{print $3}' | wc -l ) " -eq 1 ]]; then
                     procd_append_param command -o "$localadd"
                 else
                   for localaddr in $(cat /etc/config/vnt | grep 'list localadd'  | awk '{print $3}'| sed "s/'/\n/g" | tr -d " ' "); do
                   procd_append_param command -o "$localaddr"
                   done
                   fi
                fi
		[ -z "$par" ] || procd_append_param command --par "$par"
		[ "$punch" = "ipv4/ipv6" ] || procd_append_param command --punch "$punch"
		[ "$passmode" = "off" ] || procd_append_param command --model "$passmode"
		[ "$tunmode" = "tun" ] || procd_append_param command -a
		[ "$tcp" = "udp" ] || procd_append_param command --tcp
		[ "$forward" = "0" ] || procd_append_param command --no-proxy
		[ "$finger" = "0" ] || procd_append_param command --finger
		[ "$multicast" = "0" ] || procd_append_param command -m
		[ "$serverw" = "0" ] || procd_append_param command -W
		[ "$first_latency" = "0" ] || procd_append_param command --first_latency
                [ "$relay" = "0" ] || procd_append_param command --relay

		procd_set_param limits core="unlimited"
		procd_set_param limits nofile="1000000 1000000"
		procd_set_param stdout 1
		procd_set_param stderr 1
		procd_set_param respawn
		procd_close_instance

		iptables -t nat -I POSTROUTING -j MASQUERADE
		iptables -I FORWARD -o vnt-tun -j ACCEPT
                iptables -I FORWARD -i vnt-tun -j ACCEPT
                iptables -I INPUT -i vnt-tun -j ACCEPT
		[ "$forward" = "0" ] || sysctl -w net.ipv4.ip_forward=1
	;;
	vnts)
		local enabled
		config_get_bool enabled "$cfg" 'enabled' '0'
		[ "$enabled" = "1" ] || return 1
                config_get vntsbin "$cfg" 'vntsbin'
                if [ -z "$vntsbin" ] ;then
                   vntsbin=/tmp/vnts
                fi
                if [ "$vntsbin" = "/usr/bin/vnts" ] || [ -f /usr/bin/vnts ] ; then
                   sed -i "/vntsbin/c option vntsbin '/usr/bin/vnts' " /etc/config/vnt 
                   vntsbin=/usr/bin/vnts
                fi
		if [ $(($($vntsbin -h | wc -l))) -lt 3 ] || [ ! -f "$vntsbin" ] ; then
		logger "vnt : ${vntsbin} 不存在，开始在线下载1.2.4版本，下载较慢耐心等候，如需最新版请前去官方下载手动上传或修改此脚本"
                path=$(dirname "$vntsbin")
                mkdir -p "$path"
		case "${cpucore}" in 
	           "mipsle")  curl -L -k -o /tmp/vnts.tar.gz --connect-timeout 10 --retry 3 https://github.com/lbl8603/vnts/releases/download/1.2.4/vnts-mipsel-unknown-linux-musl-1.2.4.tar.gz
	           ;;
	           "mips")  logger "vnt : 官方暂未发布mips版本，请联系群里，程序退出" 
                   exit 1
	           ;;
	           "x86_64")  curl -L -k -o /tmp/vnts.tar.gz --connect-timeout 10 --retry 3 https://github.com/lbl8603/vnts/releases/download/1.2.4/vnts-x86_64-unknown-linux-gnu-1.2.4.tar.gz
	           ;;
	           "i386")  logger "vnt : 不确定版本程序，请前往官方手动下载上传或联系群里，程序退出"
                   exit 1
	           ;;
	           "arm")  curl -L -k -o /tmp/vnts.tar.gz --connect-timeout 10 --retry 3 https://github.com/lbl8603/vnts/releases/download/1.2.4/vnts-arm-unknown-linux-gnueabihf-1.2.4.tar.gz
	           ;;
	           "armv7")  curl -L -k -o /tmp/vnts.tar.gz --connect-timeout 10 --retry 3 https://github.com/lbl8603/vnts/releases/download/1.2.4/vnts-armv7-unknown-linux-gnueabihf-1.2.4.tar.gz
	           ;;
	           "aarch64")  curl -L -k -o/tmp/vnts.tar.gz --connect-timeout 10 --retry 3 https://github.com/lbl8603/vnts/releases/download/1.2.4/vnts-aarch64-unknown-linux-gnu-1.2.4.tar.gz
	           ;;
                   esac
                   tar zxf /tmp/vnts.tar.gz -C /tmp/
                   chmod +x /tmp/vnts
 if [ $(($(/tmp/vnts -h | wc -l))) -gt 3 ]; then
    logger "vnt : /tmp/vnts 下载成功"
    if [ "${path:0:4}" = "/tmp" ] ;then 
       size="$(df -k | awk '/\/overlay$/ {sub(/K$/, "", $4); print $4}')"
       if [ "$size" -gt 4 ] ; then
       cp -rf /tmp/vnts /usr/bin/vnts
       sed -i "/vntsbin/c option vntsbin '/usr/bin/vnts' " /etc/config/vnt
       vntsbin=/usr/bin/vnts
       fi
    fi
 else
 logger "vnt : $vntsbin 下载失败，请手动下载上传程序,程序退出"
 exit 1
 fi
                fi
               chmod +x "$vntsbin"
		
                pgrep vnts | xargs kill -9 >/dev/null 2>&1
		local server_port white_Token subnet servern_netmask logs
		config_get server_port "$cfg" 'server_port'
		config_get white_Token "$cfg" 'white_Token'
		config_get subnet "$cfg" 'subnet'
		config_get servern_netmask "$cfg" 'servern_netmask'
                config_get_bool logs "$cfg" 'logs' '0'

		procd_open_instance "vnts"
		procd_set_param command "$vntsbin"
		procd_append_param command --port "$server_port"

		if [ ! -z "$white_Token" ] ; then
                   if [[ "$(grep "list white_Token" /etc/config/vnt | awk '{print $3}' | wc -l ) " -eq 1 ]]; then
                     procd_append_param command --white-token "$white_Tokenr"
                   else
                   for white_Tokens in $(cat /etc/config/vnt | grep 'list white_Token'  | awk '{print $3}'| sed "s/'/\n/g" | tr -d " ' "); do
                   procd_append_param command --white-token "$white_Tokens"
                   done
                   fi
                fi
		[ -z "$subnet" ] || procd_append_param command --gateway "$subnet"
		[ -z "$servern_netmask" ] || procd_append_param command --netmask "$servern_netmask"

		procd_set_param limits core="unlimited"
		procd_set_param limits nofile="1000000 1000000"
		procd_set_param stdout 1
		procd_set_param stderr 1
		procd_set_param respawn
		procd_close_instance

		iptables -I INPUT -p udp --dport $server_port -j ACCEPT -m comment --comment 'vnt vnts'
                iptables -I INPUT -p tcp --dport $server_port -j ACCEPT -m comment --comment 'vnt vnts'
                [ "$logs" = "0" ] && rm -rf "$(dirname "$(find /root -name 'log4rs.yaml')")"
	;;
	esac
}

stop_instance() {
	local cfg="$1"

	local type
	config_get type "$cfg" TYPE

	case "$type" in
	vnt-cli)

		pgrep vnt-cli | xargs kill -9 >/dev/null 2>&1
		iptables -D FORWARD -o vnt-tun -j ACCEPT 2>"/dev/null"
                iptables -D FORWARD -i vnt-tun -j ACCEPT 2>"/dev/null"
                iptables -D INPUT -i vnt-tun -j ACCEPT 2>"/dev/null"
	;;
	vnts)
		local server_port
		config_get server_port "$cfg" 'server_port'
                pgrep vnts | xargs kill -9 >/dev/null 2>&1
		iptables -D INPUT -p udp --dport "$server_port" -j ACCEPT -m comment --comment 'vnt vnts' 2>"/dev/null"
                iptables -D INPUT -p tcp --dport "$server_port" -j ACCEPT -m comment --comment 'vnt vnts' 2>"/dev/null"

	;;
	esac
}

start_service() {
        logger "vnt : 开始启动"
	config_load 'vnt'
	config_foreach start_instance 'vnt-cli'
	config_foreach start_instance 'vnts'
}

stop_service() {
        logger "vnt : 停止运行"
	config_load 'vnt'
	config_foreach stop_instance 'vnt-cli'
	config_foreach stop_instance 'vnts'
}

reload_service() {
       logger "vnt : 重新启动"
	stop
	start
}

service_triggers() {
	procd_add_reload_trigger "vnt"
}
