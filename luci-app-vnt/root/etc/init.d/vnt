#!/bin/sh /etc/rc.common
# Copyright (C) 2008-2020 OpenWrt.org

START=99
USE_PROCD=1
size="$(df -k | awk '/\/overlay$/ {sub(/K$/, "", $4); print $4}')"

start_vntcli() {
                local cfg="$1"
		local enabled
		config_get_bool enabled "$cfg" 'enabled' '0'
		[ "$enabled" = "1" ] || return 1
                config_get clibin "$cfg" 'clibin'
                if [ -z "$clibin" ] ;then
                   clibin=/tmp/vnt-cli
                fi
                echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : 开始启动" >>/log/vnt-cli.log
                path=$(dirname "$clibin")
                if [ -f /tmp/vnt-cli ] && [ "${path:0:4}" != "/tmp" ] ;then
                   chmod +x /tmp/vnt-cli
                   echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : 找到上传的程序/tmp/vnt-cli，替换为$clibin " >>/log/vnt-cli.log
                   upsize="$(du -k /tmp/vnt-cli | cut -f1)"
                   result=$(expr $size - $upsize)
                   if [ $(($(/tmp/vnt-cli -h | wc -l))) -gt 3 ] && [ "$result" -gt 500 ] ; then
                     mv -f /tmp/vnt-cli "$clibin"
                     else
                     echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : 无法替换，上传的程序不完整或自定义路径的可用空间不足，当前空间剩余${size}kb" >>/log/vnt-cli.log
                   fi
                fi
                if [ ! -f "$clibin" ] && [ "$size" -lt 4000 ] ; then
                    echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : 自定义程序路径的可用空间不足，当前可用空间剩余${size}kb,自动切换为内存/tmp/vnt-cli" >>/log/vnt-cli.log
                    sed -i "/clibin/c option clibin '/tmp/vnt-cli' " /etc/config/vnt 
                    clibin=/tmp/vnt-cli
                fi
		if [ $(($($clibin -h | wc -l))) -lt 3 ] || [ ! -f "$clibin" ] ; then
		 echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : 未找到程序 $clibin 开始在线下载，下载较慢耐心等候" >>/log/vnt-cli.log
                 mkdir -p "$path"
case "${cpucore}" in 
	"mipsle")  curl -o "${clibin}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_mipsle
	;;
	"mips")  curl -o "${clibin}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_mips
	;;
	"x86_64")  curl -o "${clibin}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_x86_64
	;;
	"i386")  curl -o "${clibin}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_i386
	;;
	"arm")  curl -o "${clibin}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_arm
	;;
	"armv7")  curl -o "${clibin}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_armv7
	;;
	"aarch64")  curl -o "${clibin}" --connect-timeout 10 --retry 3 http://free1.fujufrp.cf:19213/vnt-cli_aarch64
	;;
esac
 chmod +x "$clibin"
 if [ $(($($clibin -h | wc -l))) -gt 3 ]; then
    echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : ${clibin} 下载成功" >>/log/vnt-cli.log
 else
   uci -q set vnt.@vnt-cli[0].enabled=0
   uci commit
   echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : $clibin 下载失败，请手动下载上传程序,程序退出" >>/log/vnt-cli.log
   return 1
 fi
                fi
                chmod +x "$clibin"
                ver="$($clibin -h | grep version | awk -F ':' {'print $2'})"
                [ ! -z "$ver" ] && echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : ${clibin}_${ver} " >>/log/vnt-cli.log
                ps | grep 'vnt-cli' | grep -v grep | awk '{print $1}' | xargs kill >/dev/null 2>&1
                ps | grep 'vnt-cli' | grep -v grep | awk '{print $1}' | xargs kill -9 >/dev/null 2>&1
		local token mode ipaddr mtu desvice_id localadd log
		local peeradd desvice_name vntshost stunhost 
		local punch client_port par key forward serverw 
		local finger relay first_latency multicast tunmode tcp passmode
		config_get token "$cfg" 'token'
                config_get desvice_id "$cfg" 'desvice_id'
                config_get desvice_name "$cfg" 'desvice_name'
                config_get vntshost "$cfg" 'vntshost'
                config_get stunhost "$cfg" 'stunhost'
                config_get client_port "$cfg" 'client_port'
                config_get par "$cfg" 'par'
                config_get punch "$cfg" 'punch'
                config_get passmode "$cfg" 'passmode'
                config_get peeradd "$cfg" 'peeradd'
                config_get localadd "$cfg" 'localadd'
		config_get mode "$cfg" 'mode'
		config_get ipaddr "$cfg" 'ipaddr'
		config_get mtu "$cfg" 'mtu'
		config_get tunmode "$cfg" 'tunmode'
		config_get key "$cfg" 'key'
		config_get_bool relay "$cfg" 'relay' '0'
		config_get_bool serverw "$cfg" 'serverw' '0'
		config_get tcp "$cfg" 'tcp'
		config_get_bool forward "$cfg" 'forward' '0'
		config_get_bool finger "$cfg" 'finger' '0'
		config_get_bool multicast "$cfg" 'multicast' '0'
		config_get_bool first_latency "$cfg" 'first_latency' '0'
                config_get_bool log "$cfg" 'log' '0'
               if [ "$log" = "1" ] ;then
                 if [ ! -f /tmp/log4rs.yaml ] ; then
                  cat > /tmp/log4rs.yaml<<EOF
refresh_rate: 30 seconds
appenders:
  rolling_file:
    kind: rolling_file
    path: log/vnt-cli.log
    append: true
    encoder:
      pattern: "{d} [{f}:{L}] {h({l})} {M}:{m}{n}"
    policy:
      kind: compound
      trigger:
        kind: size
        limit: 1 mb
      roller:
        kind: fixed_window
        pattern: log/vnt-cli.{}.log
        base: 1
        count: 2

root:
  level: info
  appenders:
    - rolling_file
EOF
           fi
        [ ! -L /log4rs.yaml ] && rm -rf /log4rs.yaml && ln -sf /tmp/log4rs.yaml /log4rs.yaml
      else
      rm -rf /tmp/log4rs.yaml
          fi
		procd_open_instance "vnt-cli"
		procd_set_param command "$clibin"
		procd_append_param command -k "$token"
		[ -z "$ipaddr" ] || procd_append_param command --ip "$ipaddr"
		[ -z "$mtu" ] || procd_append_param command -u "$mtu"
		[ -z "$desvice_id" ] || procd_append_param command -d "$desvice_id"
		[ -z "$desvice_name" ] || procd_append_param command -n "$desvice_name"
		[ -z "$vntshost" ] || procd_append_param command -s "$vntshost"
		[ -z "$client_port" ] || procd_append_param command --port "$client_port"
		if [ ! -z "$peeradd" ] ; then
                  if [[ "$(grep "list peeradd" /etc/config/vnt | awk '{print $3}' | wc -l ) " -eq 1 ]]; then
                    procd_append_param command -i "$peeradd"
                  else
                    for peeraddr in $(cat /etc/config/vnt | grep 'list peeradd'  | awk '{print $3}'| sed "s/'/\n/g" | tr -d " ' "); do
                    procd_append_param command -i "$peeraddr"
                   done
                   fi
                fi

                if [ ! -z "$localadd" ] ; then
                  if [[ "$(grep "list localadd" /etc/config/vnt | awk '{print $3}' | wc -l ) " -eq 1 ]]; then
                     procd_append_param command -o "$localadd"
                 else
                   for localaddr in $(cat /etc/config/vnt | grep 'list localadd'  | awk '{print $3}'| sed "s/'/\n/g" | tr -d " ' "); do
                   procd_append_param command -o "$localaddr"
                   done
                   fi
                fi

                if [ ! -z "$stunhost" ] ; then
                  if [[ "$(grep "list stunhost" /etc/config/vnt | awk '{print $3}' | wc -l ) " -eq 1 ]]; then
                    procd_append_param command -e "$stunhost"
                  else
                    for stunhosts in $(cat /etc/config/vnt | grep 'list stunhost'  | awk '{print $3}'| sed "s/'/\n/g" | tr -d " ' "); do
                    procd_append_param command -e "$stunhosts"
                   done
                   fi
                fi
		[ -z "$par" ] || procd_append_param command --par "$par"
		[ "$punch" = "ipv4/ipv6" ] || procd_append_param command --punch "$punch"
		[ "$passmode" != "off" ] && [ -n "$key" ] && procd_append_param command --model "$passmode"
		[ "$passmode" != "off" ] && [ -n "$key" ] && procd_append_param command -w "$key"
		[ "$tunmode" = "tun" ] || procd_append_param command -a
		[ "$tcp" = "udp" ] || procd_append_param command --tcp
		[ "$forward" = "0" ] || procd_append_param command --no-proxy
		[ "$finger" = "0" ] || procd_append_param command --finger
		[ "$multicast" = "0" ] || procd_append_param command -m
		[ "$serverw" = "0" ] || procd_append_param command -W
		[ "$first_latency" = "0" ] || procd_append_param command --first_latency
                [ "$relay" = "0" ] || procd_append_param command --relay

		procd_set_param limits core="unlimited"
		procd_set_param limits nofile="1000000 1000000"
		procd_set_param stdout 1
		procd_set_param stderr 1
		procd_set_param respawn
		procd_close_instance

		iptables -t nat -I POSTROUTING -j MASQUERADE
		iptables -I FORWARD -o vnt-tun -j ACCEPT
                iptables -I FORWARD -i vnt-tun -j ACCEPT
                iptables -I INPUT -i vnt-tun -j ACCEPT
		[ "$forward" = "0" ] || sysctl -w net.ipv4.ip_forward=1
}

start_vnts() {
                local cfg="$1"
		local enabled
		config_get_bool enabled "$cfg" 'enabled' '0'
		[ "$enabled" = "1" ] || return 1
		echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : 开始启动" >>/log/vnts.log
                config_get vntsbin "$cfg" 'vntsbin'
                if [ -z "$vntsbin" ] ;then
                   vntsbin=/tmp/vnts
                fi
                path=$(dirname "$vntsbin")
                if [ -f /tmp/vnts ] && [ "${path:0:4}" != "/tmp" ] ;then
                   chmod +x /tmp/vnts
                   echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : 找到上传的程序/tmp/vnts，替换为$vntsbin " >>/log/vnts.log
                   upsize="$(du -k /tmp/vnts | cut -f1)"
                   result=$(expr $size - $upsize)
                   if [ $(($(/tmp/vnts -h | wc -l))) -gt 3 ] && [ "$result" -gt 500 ] ; then
                     mv -f /tmp/vnts "$vntsbin"
                     else
                     echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : 无法替换，上传的程序不完整或自定义路径的可用空间不足，当前空间剩余${size}kb" >>/log/vnts.log
                   fi
                fi
                if [ ! -f "$vntsbin" ] && [ "$size" -lt 4000 ] ; then
                    echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : 自定义程序路径的可用空间不足，当前可用空间剩余${size}kb,自动切换为内存/tmp/vnts" >>/log/vnts.log
                    sed -i "/vntsbin/c option vntsbin '/tmp/vnts' " /etc/config/vnt 
                    vntsbin=/tmp/vnts
                fi
		if [ $(($($vntsbin -h | wc -l))) -lt 3 ] || [ ! -f "$vntsbin" ] ; then
		echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : ${vntsbin} 不存在，开始在线下载1.2.4版本，下载较慢耐心等候，如需最新版请前去官方下载手动上传或修改此脚本" >>/log/vnts.log
                mkdir -p "$path"
		case "${cpucore}" in 
	           "mipsle")  curl -L -k -o /tmp/vnts.tar.gz --connect-timeout 10 --retry 3 https://github.com/lbl8603/vnts/releases/download/1.2.4/vnts-mipsel-unknown-linux-musl-1.2.4.tar.gz
	           ;;
	           "mips")  echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : 官方暂未发布mips版本，请联系群里，程序退出" >>/log/vnts.log
	           uci -q set vnt.@vnts[0].enabled=0
                   uci commit
                   return 1
	           ;;
	           "x86_64")  curl -L -k -o /tmp/vnts.tar.gz --connect-timeout 10 --retry 3 https://github.com/lbl8603/vnts/releases/download/1.2.4/vnts-x86_64-unknown-linux-gnu-1.2.4.tar.gz
	           ;;
	           "i386")  echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : 不确定版本程序，请前往官方手动下载上传或联系群里，程序退出" >>/log/vnts.log
	           uci -q set vnt.@vnts[0].enabled=0
                   uci commit
                   return 1
	           ;;
	           "arm")  curl -L -k -o /tmp/vnts.tar.gz --connect-timeout 10 --retry 3 https://github.com/lbl8603/vnts/releases/download/1.2.4/vnts-arm-unknown-linux-gnueabihf-1.2.4.tar.gz
	           ;;
	           "armv7")  curl -L -k -o /tmp/vnts.tar.gz --connect-timeout 10 --retry 3 https://github.com/lbl8603/vnts/releases/download/1.2.4/vnts-armv7-unknown-linux-gnueabihf-1.2.4.tar.gz
	           ;;
	           "aarch64")  curl -L -k -o/tmp/vnts.tar.gz --connect-timeout 10 --retry 3 https://github.com/lbl8603/vnts/releases/download/1.2.4/vnts-aarch64-unknown-linux-gnu-1.2.4.tar.gz
	           ;;
                   esac
                   tar zxf /tmp/vnts.tar.gz -C /tmp/
                   chmod +x /tmp/vnts
                   rm -rf /tmp/vnts.tar.gz
                  if [ $(($(/tmp/vnts -h | wc -l))) -gt 3 ]; then
                    echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : /tmp/vnts 下载成功" >>/log/vnts.log
                    mv -f /tmp/vnts "$vntsbin"
                 else
                     uci -q set vnt.@vnts[0].enabled=0
                     uci commit
                     echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : $vntsbin 下载失败，请手动下载上传程序,程序退出" >>/log/vnts.log
                     return 1
                  fi
                fi
               chmod +x "$vntsbin"
                ps | grep 'vnts' | grep -v grep | awk '{print $1}' | xargs kill >/dev/null 2>&1
                ps | grep 'vnts' | grep -v grep | awk '{print $1}' | xargs kill -9 >/dev/null 2>&1
		local server_port white_Token subnet servern_netmask logs sfinger
		config_get server_port "$cfg" 'server_port'
		config_get white_Token "$cfg" 'white_Token'
		config_get subnet "$cfg" 'subnet'
		config_get servern_netmask "$cfg" 'servern_netmask'
                config_get_bool logs "$cfg" 'logs' '0'
                config_get_bool sfinger "$cfg" 'sfinger' '0'

		procd_open_instance "vnts"
		procd_set_param command "$vntsbin"
		procd_append_param command --port "$server_port"

		if [ ! -z "$white_Token" ] ; then
                   if [[ "$(grep "list white_Token" /etc/config/vnt | awk '{print $3}' | wc -l ) " -eq 1 ]]; then
                     procd_append_param command --white-token "$white_Tokenr"
                   else
                   for white_Tokens in $(cat /etc/config/vnt | grep 'list white_Token'  | awk '{print $3}'| sed "s/'/\n/g" | tr -d " ' "); do
                   procd_append_param command --white-token "$white_Tokens"
                   done
                   fi
                fi
		[ -z "$subnet" ] || procd_append_param command --gateway "$subnet"
		[ -z "$servern_netmask" ] || procd_append_param command --netmask "$servern_netmask"
                [ "$sfinger" = "0" ] || procd_append_param command --finger

		procd_set_param limits core="unlimited"
		procd_set_param limits nofile="1000000 1000000"
		procd_set_param stdout 1
		procd_set_param stderr 1
		procd_set_param respawn
		procd_close_instance

		iptables -I INPUT -p udp --dport $server_port -j ACCEPT -m comment --comment 'vnt vnts'
                iptables -I INPUT -p tcp --dport $server_port -j ACCEPT -m comment --comment 'vnt vnts'
	        [ "$(uci -q get vnt.@vnts[0].logs)" = "0" ] && rm -rf /log/vnts*.log /log/log4rs.yaml
	      if [ "$logs" = "1" ] ;then
	       sed -i 's|limit: 10 mb|limit: 1 mb|g' /log/log4rs.yaml
	       sed -i 's|count: 5|count: 2|g' /log/log4rs.yaml
	      else
	       rm -rf /log/log4rs.yaml
	      fi
}

stop_cli() {
                ps | grep 'vnt-cli' | grep -v grep | awk '{print $1}' | xargs kill >/dev/null 2>&1
                ps | grep 'vnt-cli' | grep -v grep | awk '{print $1}' | xargs kill -9 >/dev/null 2>&1
		iptables -D FORWARD -o vnt-tun -j ACCEPT 2>"/dev/null"
                iptables -D FORWARD -i vnt-tun -j ACCEPT 2>"/dev/null"
                iptables -D INPUT -i vnt-tun -j ACCEPT 2>"/dev/null"
                rm -rf /tmp/vnt-cli_info /tmp/vnt-cli_all /tmp/vnt-cli_list /tmp/vnt-cli_route
                rm -rf /log/vnt-cli*.log
                echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : 停止运行" >>/log/vnt-cli.log
}
stop_vnts() {
	        local cfg="$1"
		local server_port
		config_get server_port "$cfg" 'server_port'
                ps | grep 'vnts' | grep -v grep | awk '{print $1}' | xargs kill >/dev/null 2>&1
                ps | grep 'vnts' | grep -v grep | awk '{print $1}' | xargs kill -9 >/dev/null 2>&1
		iptables -D INPUT -p udp --dport "$server_port" -j ACCEPT -m comment --comment 'vnt vnts' 2>"/dev/null"
                iptables -D INPUT -p tcp --dport "$server_port" -j ACCEPT -m comment --comment 'vnt vnts' 2>"/dev/null"
                rm -rf /log/vnts*.log
                echo "$(date '+%Y-%m-%d %H:%M:%S') vnt : 停止运行" >>/log/vnts.log
}

start_service() {
	config_load 'vnt'
	cputype=$(uname -ms | tr ' ' '_' | tr '[A-Z]' '[a-z]')
        [ -n "$(echo $cputype | grep -E "linux.*armv.*")" ] && cpucore="arm"
        [ -n "$(echo $cputype | grep -E "linux.*armv7.*")" ] && [ -n "$(cat /proc/cpuinfo | grep vfp)" ] && [ ! -d /jffs/clash ] && cpucore="armv7"
        [ -n "$(echo $cputype | grep -E "linux.*aarch64.*|linux.*armv8.*")" ] && cpucore="aarch64"
        [ -n "$(echo $cputype | grep -E "linux.*86.*")" ] && cpucore="i386"
        [ -n "$(echo $cputype | grep -E "linux.*86_64.*")" ] && cpucore="x86_64"
        if [ -n "$(echo $cputype | grep -E "linux.*mips.*")" ] ; then
           mipstype=$(echo -n I | hexdump -o 2>/dev/null | awk '{ print substr($2,6,1); exit}') 
           [ "$mipstype" = "0" ] && cpucore="mips" || cpucore="mipsle"
        fi
        
        if [ ! -L /log ] || [ ! -d /log ]  ; then
          [ -d /log ] && rm -rf /log
          mkdir -p /tmp/vnt_logs
          ln -sf /tmp/vnt_logs /log
        fi
        [ ! -d /root/.vnt-cli ] && mkdir -p /root/.vnt-cli
        [ ! -L /.vnt-cli ] && rm -rf /.vnt-cli && ln -sf /root/.vnt-cli /.vnt-cli
	[ "$(uci -q get vnt.@vnt-cli[0].enabled)" = "1" ] && config_foreach start_vntcli 'vnt-cli'
	[ "$(uci -q get vnt.@vnts[0].enabled)" = "1" ] && config_foreach start_vnts 'vnts'
}

stop_service() {
        [ "$(uci -q get vnt.@vnts[0].enabled)" = "0" ] && stop_vnts 'vnts'
        [ "$(uci -q get vnt.@vnt-cli[0].enabled)" = "0" ] && stop_cli
}

reload_service() {
	stop
	start
}

service_triggers() {
	procd_add_reload_trigger "vnt"
}
